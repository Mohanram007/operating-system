#include <stdio.h>

#define MAX_PROCESSES 10

struct Process {
    int id;
    int burst_time;
    int remaining_time;
};

void round_robin_scheduling(struct Process processes[], int n, int time_quantum) {
    int i, total_time = 0, total_burst_time = 0;

    for (i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
        total_burst_time += processes[i].burst_time;
    }

    printf("\nExecuting processes using Round Robin Scheduling:\n");

    i = 0; // Index of the current process
    while (total_time < total_burst_time) {
        if (processes[i].remaining_time > 0) {
            int execute_time = (processes[i].remaining_time > time_quantum) ? time_quantum : processes[i].remaining_time;

            // Execute the process
            printf("Time %d: Executing process %d (Remaining Time: %d)\n", total_time, processes[i].id, processes[i].remaining_time);
            processes[i].remaining_time -= execute_time;
            total_time += execute_time;
        }

        // Move to the next process in a circular manner
        i = (i + 1) % n;
    }
}

int main() {
    int n, time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_PROCESSES) {
        printf("Invalid number of processes. Please enter a value between 1 and %d.\n", MAX_PROCESSES);
        return 1;
    }

    struct Process processes[MAX_PROCESSES];

    printf("Enter burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &time_quantum);

    round_robin_scheduling(processes, n, time_quantum);

    return 0;
}
