#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int burst_time;
    int priority;
    int remaining_time;
};

void swap(struct Process *xp, struct Process *yp) {
    struct Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sort_by_priority(struct Process processes[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++)       
        for (j = 0; j < n-i-1; j++)
            if (processes[j].priority < processes[j+1].priority)
                swap(&processes[j], &processes[j+1]);
}

void priority_scheduling(struct Process processes[], int n) {
    int time = 0;
    
    while (1) {
        int flag = 1; // To check if all processes are completed
        
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                flag = 0; // There is still a process remaining
                
                // Execute the process with the highest priority
                printf("Time %d: Executing process %d\n", time, processes[i].id);
                processes[i].remaining_time--;
                time++;
            }
        }
        
        // If all processes are completed, break the loop
        if (flag)
            break;
        
        // Sort the processes by priority after each time unit
        sort_by_priority(processes, n);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process *processes = (struct Process*)malloc(n * sizeof(struct Process));

    printf("Enter burst time and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Sort the processes by priority initially
    sort_by_priority(processes, n);

    printf("\nExecuting processes using Pre-emptive Priority Scheduling:\n");
    priority_scheduling(processes, n);

    free(processes);

    return 0;
}
