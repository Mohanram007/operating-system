#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int burst_time;
    int arrival_time;
    int completion_time;
};

void swap(struct Process *xp, struct Process *yp) {
    struct Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sort_by_arrival_time(struct Process processes[], int n) {
    int i, j;
    for (i = 0; i < n-1; i++)       
        for (j = 0; j < n-i-1; j++)
            if (processes[j].arrival_time > processes[j+1].arrival_time)
                swap(&processes[j], &processes[j+1]);
}

void sjf_scheduling(struct Process processes[], int n) {
    int time = 0;

    for (int i = 0; i < n; i++) {
        // Sort processes by arrival time
        sort_by_arrival_time(processes, n);

        // Find the first process that has arrived
        int j;
        for (j = 0; j < n; j++) {
            if (processes[j].arrival_time > time) {
                time = processes[j].arrival_time;
                break;
            }
        }

        // Execute the process with the shortest burst time
        printf("Time %d: Executing process %d\n", time, processes[j].id);
        processes[j].completion_time = time + processes[j].burst_time;
        time = processes[j].completion_time;
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process *processes = (struct Process*)malloc(n * sizeof(struct Process));

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
    }

    printf("\nExecuting processes using Non-Preemptive SJF Scheduling:\n");
    sjf_scheduling(processes, n);

    free(processes);

    return 0;
}
